name: Build and Release
on:
  push:
    tags:
      - "v*.*.*" # This workflow runs on tags like v1.0.0, v1.1.0, etc.

permissions:
  contents: write # Required for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper versioning

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true # Enable Go module caching

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x # Pin to major version
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Install the golangci-lint binary
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.2.1
          skip-cache: false
          skip-save-cache: false

      # Install the typos-cli binary, which is a dependency for the 'build' task
      - name: Install typos-cli
        run: |
          # 1. Create a standard directory for binaries and add it to the PATH
          mkdir -p $HOME/bin
          echo "$HOME/bin" >> $GITHUB_PATH
          # 2. Define the version and asset URL
          TYPOS_VERSION=v1.32.0
          URL="https://github.com/crate-ci/typos/releases/download/${TYPOS_VERSION}/typos-${TYPOS_VERSION}-x86_64-unknown-linux-musl.tar.gz"
          # 3. Download and extract the entire archive into the current directory
          curl -sL "$URL" | tar -xz
          # 4. Move the executable directly to the bin directory
          # The typos binary is extracted directly to the current directory
          mv typos $HOME/bin/
          # 5. Verify the installation using the full path (PATH changes take effect in next step)
          $HOME/bin/typos --version

      # Verify PATH is set correctly for subsequent steps
      - name: Verify PATH
        run: |
          echo "PATH: $PATH"
          which typos

      # Now that all dependencies are installed, we can run our tasks.
      - name: Run Linters
        run: task lint

      - name: Run Tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 30

      # This command should now succeed because its dependency 'typos' can be executed.
      - name: Build Application
        run: task build

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: code2md-binary-ubuntu
          path: code2md
          retention-days: 30

  # Multi-platform build job
  build-multiplatform:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64 # Windows ARM64 support is limited
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Build the binary
          go build -ldflags="-s -w -X main.version=${{ needs.build.outputs.version }}" -o code2md${{ matrix.goos == 'windows' && '.exe' || '' }} .

          # Create archive
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip code2md-${{ needs.build.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip code2md.exe
          else
            tar -czf code2md-${{ needs.build.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz code2md
          fi

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            code2md-${{ needs.build.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
          retention-days: 30

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    needs: [build, build-multiplatform]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            release-assets/release-*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
